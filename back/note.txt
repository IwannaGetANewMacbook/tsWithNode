---------------------------------6.20-----------------------------
chapter: module resolution
1. 남이 만든 변수나 함수는 타입추론 가능하니까 굳이 타입 안붙이고 내가 만든 변수/함수는 타입을 지정하길 권고함.

2. 'npm i -D ts-node' 명령어로 TS를 JS변환없이 바로 TS를 실행시킬수 있는 npm 패키지 설치.(-D 는 개발환경에서만 사용할 것을 의미.)
    근데 ts-node도 엄밀히 말하면 ts를 js로 바꾼뒤에 바로 노드가 실행하는 동작원리임.(내부적으로 대신 실행시켜주는 것.)
    + "nodemon" 패키지도 같이 설치!!

3. 'npx ts-node index.ts' 명령어로 index.ts 파일 실행.
    ts-node앞에 npx를 붙인 이유는 글로벌 설치를 막기위해서.
    요즘에는 글로벌 설치를 최대한 피하는 추세이고 거의 dev depndency에 추가하고 npx 명령어를 앞에 붙여줌.
    dev depndency에 추가한 라이브러리는 npx명령어로 글로벌처럼 사용가능.

4. 개발용에서는 ts-node를 쓰지만 배포용에서는 'npx tsc' 를 사용.(실제 배포할때는 ts파일이 아닌 js파일을 배포함.)
    *** ts-node는 배포용으로 쓰면 성능에 안좋은 영향을 미치므로 배포용으로 쓰기에는 무리가 있다!!!

5. 'npx tsc --traceResolution' 명령어로 타입스크립트가 해당 타입들을 어떻게 찾아오는지 추적해주는 명령어.

6. node백엔드에서 필요한 npm라이브러리들 설치하는 명령어
    (npm i morgan cors cookie-parser express-session dotenv passport hpp helmet passport-local bcrypt) +  (@types/'위의 패키지들 이름') 
    중요한건 대부분의 패키지들이 타입들을 지원안하기 떄문에 @types/ 로 타입을 전부 다운받아주어야 함.



chapter: express 미들웨어
1. @types/ 파일들은 배포할때도 필요하므로 dev dependencies가 아닌 그냥 dependencies에 넣음.

2. dotenv에 등록되어있는 변수를 쓸 때 TS가 가끔 에러를 내는데 그럴때는 뒤에 "!"를 붙여주어서 TS한테 진짜 있으니 이 변수를 써라 하고 확신을 줌.
    secret: process.env.COOKIE_SECRET! 를 예로들면 .env 파일에 COOKIE_SECRET이 무조건 있으니 에러를 내지 말아달라! 라는 뜻.



------------------------------6/27-------------------------------------

chapter: 시퀄라이즈
1. 보통 ts쓸 때는 typeORM 또는 시퀄라이즈 많이씀!
    근데 여기선 ORM으로 시퀄라이즈 쓸꺼임!
    npm i sequelize mysql2 sequelize-cli

2. 프로젝트를 도입할 때 ORM은 하나씩 가져가는게 좋음, 생쿼리 날리면 나중에 후회할꺼래.

3. 'npx sequelize init' 먼저하고'npx sequelize db:create' 해줌

4. sequelize 패키지는 내부적으로 타입을 지원하기 때문에 따로 @types 설치 안해도 됨.

5. process.env 같은경우는 ts가 어떤타입일지 추론을 잘 못함. 그래서 as키워드로 직접 타입을
   narrowing 해줘야 함.

6. 클래스의 필드값에 !를 붙여주는 이유는 해당 속성(변수)가 반드시 존재한다는 의미.

7. createdAt 과 updatedAt 은 sequelize 에서 자체적으로 관리하기 때문에 우리가 직접 만질일은 없음.

8. 순환참조는 기본적으로 발생하면 안됨. 순환참조: A B 파일이 서로를 참조하고 있는 것.
    순환참조시 두 모듈 중 하나가 빈 객체({})로 처리되어 문제가 발생.
    단, 타입을 참조하는것은 문제가 발생하지 않는다.

9. config 객체에대한 타입을 내가 정확하게 만들어주어야 함.